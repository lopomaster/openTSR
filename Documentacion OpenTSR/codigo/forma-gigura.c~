
int tipo_figura(CvSeq* result,IplImage* plantilla){  //Localiza la forma de la figura a partir de un polígono.

  double A,B,C,D,E,F,G,H;

  //CUADRADO, cuatro vértices, área superior a 1000 y estructura convexa
  //En un conjunto convexo se puede ir de cualquier punto a cualquier otro en vía recta, sin salir del mismo.
  //Formalmente: para todo (A,B) € C ->  [A,B] C C
       if(result->total==4 && fabs(cvContourArea(result,CV_WHOLE_SEQ)) > 1000 && cvCheckContourConvexity(result))  
	 {
	   CvPoint *pt[4];

	   //Extraemos los puntos de los vértices
	   for(int i=0;i<4;i++)
	     pt[i] = (CvPoint*)cvGetSeqElem(result, i);

	   ///////////////////////////////////////////////  Dibujo cuadrado
	   for (int i=0;i<result->total-1;i++){
	      cvLine(plantilla, *pt[i], *pt[i+1],CV_RGB(255,0,0),5,8,0);
	   }
	   cvLine(plantilla, *pt[result->total-1], *pt[0],CV_RGB(255,0,0),5,8,0);
           //////////////////////////////////////////////

	   //Procedemos a calcular el ángulo de los 4 vértices (condición: 90 grados cada uno)
	   //cout <<"angulo cuadrado " << acos(angulo(pt[3],pt[1],pt[0]))*180/PI << endl; 
	   //cout <<"angulo cuadrado " << acos(angulo(pt[0],pt[2],pt[1]))*180/PI << endl;
	   //cout <<"angulo cuadrado " << acos(angulo(pt[3],pt[1],pt[2]))*180/PI << endl; 
	   //cout <<"angulo cuadrado " << acos(angulo(pt[0],pt[2],pt[3]))*180/PI << endl;

	   A = acos(angulo(pt[3],pt[1],pt[0]))*180/PI; 
	   B = acos(angulo(pt[0],pt[2],pt[1]))*180/PI;
	   C = acos(angulo(pt[3],pt[1],pt[2]))*180/PI; 
	   D = acos(angulo(pt[0],pt[2],pt[3]))*180/PI;

            if( A < 92 && A > 88 && B < 92 && B > 88 &&  C < 92 && C > 88 &&  D < 92 && D > 88   ){ 
	      cout <<"¡¡¡CUADRADO DETECTADO!!" << endl;
	      return 4;
            }
	  }

       //OCTÓGONO
       if(result->total==8 && fabs(cvContourArea(result,CV_WHOLE_SEQ)) > 1000 && cvCheckContourConvexity(result)) 
	 {

           //Extraemos los puntos de los vértices
	   CvPoint *pt[8];
	   for(int i=0;i<8;i++)
	     pt[i] = (CvPoint*)cvGetSeqElem(result, i);

	   /////Dibujo octógono
	   for (int i=0;i<result->total-1;i++)
	      cvLine(plantilla, *pt[i], *pt[i+1],CV_RGB(0,255,255),5,8,0);
       
	   cvLine(plantilla, *pt[result->total-1], *pt[0],CV_RGB(0,255,255),5,8,0);
           ///////////////////////

	   //Procedemos a calcular el ángulo de los 8 vértices. Hexágono regular, 135 grados por vértice, 1080 en total.
	   //cout <<"angulo hexágono " << acos(angulo(pt[7],pt[1],pt[0]))*180/PI << endl; 
	   //cout <<"angulo hexágono " << acos(angulo(pt[0],pt[2],pt[1]))*180/PI << endl;
	   //cout <<"angulo hexágono " << acos(angulo(pt[3],pt[1],pt[2]))*180/PI << endl; 
	   //cout <<"angulo hexágono " << acos(angulo(pt[4],pt[2],pt[3]))*180/PI << endl;
	   //cout <<"angulo hexágono " << acos(angulo(pt[5],pt[3],pt[4]))*180/PI << endl;
	   //cout <<"angulo hexágono " << acos(angulo(pt[6],pt[4],pt[5]))*180/PI << endl;
	   //cout <<"angulo hexágono " << acos(angulo(pt[7],pt[5],pt[6]))*180/PI << endl;
	   //cout <<"angulo hexágono " << acos(angulo(pt[0],pt[6],pt[7]))*180/PI << endl;

	   A = acos(angulo(pt[7],pt[1],pt[0]))*180/PI; 
	   B = acos(angulo(pt[0],pt[2],pt[1]))*180/PI;
	   C = acos(angulo(pt[3],pt[1],pt[2]))*180/PI; 
	   D = acos(angulo(pt[4],pt[2],pt[3]))*180/PI;
	   E = acos(angulo(pt[5],pt[3],pt[4]))*180/PI;
	   F = acos(angulo(pt[6],pt[4],pt[5]))*180/PI;
	   G = acos(angulo(pt[7],pt[5],pt[6]))*180/PI;
	   H = acos(angulo(pt[0],pt[6],pt[7]))*180/PI;

	   if( A < 137 && A > 133 && B < 137 && B > 133 &&  C < 137 && C > 133 &&
	       D < 137 && D > 133 && E < 137 && E > 133 &&  F < 137 && F > 133 &&
	       G < 137 && G > 133 && H < 137 && H > 133){ 

	     cout <<"¡¡¡OCTÓGONO DETECTADO!!" << endl;
	     return 8;
	   }
	   
	 } 
         
       if(result->total==3) //TRIANGULO
	 {

	   //Extraemos los puntos de los vértices		  
	   CvPoint *pt[3];
	   for(int i=0;i<3;i++)
	     pt[i] = (CvPoint*)cvGetSeqElem(result, i);

	   /////////////////////////////////// Dibujo de la figura en la imagen original
	   for (int i=0;i<result->total-1;i++){
	     cvLine(plantilla, *pt[i], *pt[i+1],CV_RGB(0,0,255),5,8,0);
	   }
	   cvLine(plantilla, *pt[result->total-1], *pt[0],CV_RGB(0,0,255),5,8,0);
	   //////////////////////////////////

	   //Procedemos a calcular el ángulo de los 3 vértices (condición: 60 grados cada uno aproximadamente)
	   //cout <<"angulo triangulo " << acos(angulo(pt[2],pt[1],pt[0]))*180/PI << endl; 
	   //cout <<"angulo triangulo " << acos(angulo(pt[0],pt[2],pt[1]))*180/PI << endl;
	   //cout <<"angulo triangulo " << acos(angulo(pt[0],pt[1],pt[2]))*180/PI << endl; 

	   A = acos(angulo(pt[2],pt[1],pt[0]))*180/PI; 
	   B = acos(angulo(pt[0],pt[2],pt[1]))*180/PI;
	   C = acos(angulo(pt[0],pt[1],pt[2]))*180/PI; 

	   if( A < 66 && A > 50 && B < 67 && B > 50 &&  C < 67 && C > 50 ){ 
	     cout <<"¡¡¡TRIANGULO DETECTADO!!" << endl;
	     return 3;
	   }
	  
	 }

       return 0;
}
